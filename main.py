import os
import logging
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import FSInputFile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã
from file_manager import FileManager
from docx_processor import DocxProcessor
from pdf_converter import PDFConverter
from bot_ui import BotUI

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
BASE_SAVE_PATH = r"C:\Users\User\PycharmProjects\pythonProject4"  # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤
file_manager = FileManager(BASE_SAVE_PATH)
docx_processor = DocxProcessor()
pdf_converter = PDFConverter()
bot_ui = BotUI()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=bot_ui.menu_keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ===
@dp.message(lambda message: message.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def upload_file_info(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .docx (–Ω–µ –±–æ–ª–µ–µ 50 –ú–ë).")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ===
@dp.message(lambda message: message.document)
async def handle_files(message: Message):
    file = message.document
    user_id = message.from_user.id
    file_name = file.file_name

    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file_name} –æ—Ç {user_id}")

    if not file_name.lower().endswith(".docx"):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ .docx —Ñ–∞–π–ª.")
        return

    if file.file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    user_folder = file_manager.create_user_folder(user_id)
    file_path = os.path.join(user_folder, file_name)

    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API Telegram
        file_info = await bot.get_file(file.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        with open(file_path, "wb") as f:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ BytesIO
            f.write(downloaded_file.getvalue())

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ .docx —Ñ–∞–π–ª–∞
        pages = docx_processor.process_docx(file_path, user_id)
        num_pages = len(pages)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
        keyboard = bot_ui.create_page_keyboard(num_pages)
        await message.answer(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü ===
@dp.callback_query(lambda c: c.data.startswith("page_"))
async def show_page(callback: CallbackQuery):
    user_id = callback.from_user.id
    page_num = int(callback.data.split("_")[1])

    if user_id not in docx_processor.user_documents:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.", show_alert=True)
        return

    pages = docx_processor.user_documents[user_id]

    if 0 <= page_num < len(pages):
        await callback.message.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}:\n{pages[page_num]}")
        await callback.answer()

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF ===
@dp.message(lambda message: message.text == "üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF")
async def convert_to_pdf(message: Message):
    user_id = message.from_user.id

    if user_id not in docx_processor.user_documents:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª!")
        return

    user_folder = file_manager.create_user_folder(user_id)
    docx_file = pdf_converter.get_latest_docx(user_folder)

    if not docx_file:
        await message.answer("‚ùå DOCX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    docx_path = os.path.join(user_folder, docx_file)
    pdf_path = pdf_converter.convert_to_pdf(docx_path)

    try:
        pdf_file = FSInputFile(pdf_path)
        await bot.send_document(
            message.chat.id, pdf_file, caption="–í–æ—Ç –≤–∞—à PDF!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ PDF.")
    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã) ===


@dp.message()
async def handle_unknown_text(message: Message, menu_keyboard=None):
    if message.text and not message.text.startswith("/") and not message.document:
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=menu_keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
