import asyncio
import os
import logging
import re
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command
from docx import Document
from docx2pdf import convert

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
BASE_SAVE_PATH = r"C:\Users\User\PycharmProjects\pythonProject4"  # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ ===
def create_user_folder(user_id: int) -> str:
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –µ–≥–æ user_id)
    user_folder = os.path.join(BASE_SAVE_PATH, str(user_id))
    if not os.path.exists(user_folder):
        os.makedirs(user_folder)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_folder}")
    return user_folder

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é ===
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")],
        [KeyboardButton(text="üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF")]
    ],
    resize_keyboard=True
)

# === –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_documents = {}

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# === –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç ===
async def schedule_file_deletion(file_path: str, delay_minutes: int = 10):
    await asyncio.sleep(delay_minutes * 60)
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            logger.info(f"–§–∞–π–ª —É–¥–∞–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# === –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def cleanup_user_data(user_id: int, delay_minutes: int = 10):
    await asyncio.sleep(delay_minutes * 60)
    if user_id in user_documents:
        del user_documents[user_id]
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(Command("start"))
async def start_handler(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=menu_keyboard)

# === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ===
@dp.message(lambda message: message.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def upload_file_info(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .docx (–Ω–µ –±–æ–ª–µ–µ 50 –ú–ë).")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ===
@dp.message(lambda message: message.document)
async def handle_files(message: Message):
    file = message.document
    file_name = file.file_name
    user_id = message.from_user.id
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file_name} –æ—Ç {user_id}")

    if not file_name.lower().endswith(".docx"):
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω:\n"
            "- –í —Ñ–æ—Ä–º–∞—Ç–µ .docx\n"
            "- –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB\n"
            "- –ù–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω"
        )
        return

    if file.file_size > 50 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_folder = create_user_folder(user_id)

    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à —Ñ–∞–π–ª...")

    try:
        file_path = await bot.get_file(file.file_id)
        downloaded_file = await bot.download_file(file_path.file_path)

        save_location = os.path.join(user_folder, file_name)
        with open(save_location, "wb") as f:
            f.write(downloaded_file.read())
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_location}")

        asyncio.create_task(schedule_file_deletion(save_location, delay_minutes=1))
        asyncio.create_task(cleanup_user_data(user_id, delay_minutes=1))

        doc = Document(save_location)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω:\n"
            "- –í —Ñ–æ—Ä–º–∞—Ç–µ .docx\n"
            "- –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50MB\n"
            "- –ù–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω"
        )
        return

    pages = []
    current_page = []

    def escape_markdown_v2(text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram.
        """
        escape_chars = r"_*[]()~`>#+-=|{}.!\\"
        return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

    for para in doc.paragraphs:
        text = para.text.strip()
        if text:
            formatted_text = escape_markdown_v2(text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —á–∞—Å—Ç—å—é —Å–ø–∏—Å–∫–∞
            if para.style.name.startswith("List"):
                formatted_text = f"‚Ä¢ {formatted_text}"

            if para.runs:
                run = para.runs[0]
                if run.bold:
                    formatted_text = f"*{formatted_text}*"
                if run.italic:
                    formatted_text = f"_{formatted_text}_"
                if run.underline:
                    formatted_text = f"__{formatted_text}__"

            current_page.append(formatted_text)

        if len(current_page) >= 30:
            pages.append("\n".join(current_page))
            current_page = []

    if current_page:
        pages.append("\n".join(current_page))

    user_documents[user_id] = pages
    num_pages = len(pages)

    inline_page_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}", callback_data=f"page_{i}")]
            for i in range(num_pages)
        ]
    )

    await message.answer(
        f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n–í –Ω—ë–º *{num_pages}* —Å—Ç—Ä–∞–Ω–∏—Ü.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=inline_page_keyboard,
        parse_mode="Markdown"
    )

# === Callback-–∫–Ω–æ–ø–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ===
@dp.callback_query(F.data.startswith("page_"))
async def show_selected_page(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_documents:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!", show_alert=True)
        return

    page_num = int(callback.data.split("_")[1])
    pages = user_documents[user_id]

    if page_num < 0 or page_num >= len(pages):
        await callback.answer("–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", show_alert=True)
    else:
        await callback.message.answer(
            f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}:*\n{pages[page_num]}", parse_mode="MarkdownV2"
        )
        await callback.answer()

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ PDF –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ===
@dp.message(lambda message: message.text == "üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF")
async def convert_to_pdf(message: Message):
    user_id = message.from_user.id
    if user_id not in user_documents:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DOCX-—Ñ–∞–π–ª!")
        return

    await message.answer("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ PDF...")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_folder = create_user_folder(user_id)

    docx_files = [f for f in os.listdir(user_folder) if f.endswith(".docx")]
    if not docx_files:
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    latest_file = max(docx_files, key=lambda f: os.path.getctime(os.path.join(user_folder, f)))
    docx_path = os.path.join(user_folder, latest_file)
    pdf_path = docx_path.replace(".docx", ".pdf")

    try:
        convert(docx_path, pdf_path)
        logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {pdf_path}")

        pdf_to_send = FSInputFile(pdf_path)
        await bot.send_document(
            chat_id=message.chat.id,
            document=pdf_to_send,
            caption=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≤–∞—à PDF: {os.path.basename(pdf_path)}"
        )

        asyncio.create_task(schedule_file_deletion(pdf_path, delay_minutes=1))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –Ω–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã) ===
@dp.message()
async def handle_unknown_text(message: Message):
    if message.text and not message.text.startswith("/") and not message.document:
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await set_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
