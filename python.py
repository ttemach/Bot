import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from aiogram.filters import Command
from docx import Document
import re

TOKEN = "7966099738:AAFApqIteo2qjORnHOUO5t-VZP9jDKMkfVM"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher()

SAVE_PATH = r"C:\Users\User\PycharmProjects\pythonProject4"
if not os.path.exists(SAVE_PATH):
    os.makedirs(SAVE_PATH)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {SAVE_PATH}")

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")]
    ],
    resize_keyboard=True
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
user_documents = {}

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

@dp.message(Command("start"))
async def start_handler(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=menu_keyboard)

@dp.message(lambda message: message.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def upload_file_info(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞")
    await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: 50 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª.")

@dp.message(lambda message: message.document)
async def handle_files(message: Message):
    file = message.document
    file_name = file.file_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª: {file_name}")

    if not file_name.lower().endswith(".docx"):
        logger.warning(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: DOCX.")
        return

    if file.file_size > 50 * 1024 * 1024:
        logger.warning(f"–§–∞–π–ª {file_name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 50 –ú–ë")
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –õ–∏–º–∏—Ç 50 –ú–ë.")
        return

    file_path = await bot.get_file(file.file_id)
    downloaded_file = await bot.download_file(file_path.file_path)

    save_location = os.path.join(SAVE_PATH, file_name)
    with open(save_location, "wb") as f:
        f.write(downloaded_file.read())
    logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {save_location}")

    doc = Document(save_location)
    pages = []
    current_page = []

    def escape_markdown(text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
        escape_chars = r"_*[]()~`>#+-=|{}.!"
        return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)

    for para in doc.paragraphs:
        text = para.text.strip()
        if text:
            formatted_text = escape_markdown(text)

            if para.style.name.startswith("List"):
                formatted_text = f"‚Ä¢ {formatted_text}"

            if para.runs:
                run = para.runs[0]
                if run.bold:
                    formatted_text = f"*{formatted_text}*"
                if run.italic:
                    formatted_text = f"_{formatted_text}_"
                if run.underline:
                    formatted_text = f"__{formatted_text}__"

            current_page.append(formatted_text)

        if len(current_page) >= 30:
            pages.append("\n".join(current_page))
            current_page = []

    if current_page:
        pages.append("\n".join(current_page))

    user_documents[message.from_user.id] = pages
    num_pages = len(pages)

    page_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=str(i + 1))] for i in range(num_pages)],
        resize_keyboard=True
    )

    await message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –í –¥–æ–∫—É–º–µ–Ω—Ç–µ {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", reply_markup=page_keyboard)

@dp.message(lambda message: message.text.isdigit())
async def get_page(message: Message):
    user_id = message.from_user.id
    if user_id not in user_documents:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —Ñ–∞–π–ª!")
        return

    page_num = int(message.text) - 1
    pages = user_documents[user_id]

    if page_num < 0 or page_num >= len(pages):
        await message.answer("‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ!")
    else:
        await message.answer(f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}:*\n{pages[page_num]}")

@dp.message()
async def block_text_messages(message: Message):
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await message.delete()

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await set_commands(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
